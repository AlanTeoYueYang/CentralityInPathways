geom_density(adjust = 1/5) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
?t.test
ggplot(p.vals.process, aes(x= p.value)) +
geom_density(adjust = 1/5) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
# You can change the t.test to wilcox.test in the below formula to compute
# Nonparametric statistics. In that case, log values would not differ.
# For publication remember to add the other possible alternative hypothesis.
p.vals.process <- gene.essential %>%
gather(., key = "Centrality", value = "cent_value",
pgr.ssc.vec,pgr.source.vec,pgr.sink.vec,pgr.und.vec,
degree.norm,
katz.ssc.vec,katz.source.norm,katz.sink.norm,
lap.ssc.vec,lap.sink.vec,lap.source.vec,lap.und.norm)%>%
group_by(pathway.name,Centrality) %>%
do(pval =tidy(t.test( cent_value~ Description,
alternative = "greater",paired = F,exact=FALSE, data = .))) %>%
unnest()  %>%
group_by(Centrality) %>%
mutate(., fdr = p.adjust(p.value)) #%>%
ggplot(p.vals.process, aes(x= p.value)) +
geom_density(adjust = 1/5) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
ggplot(p.vals.process, aes(x= p.value)) +
geom_density(adjust = 1/4) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
# You can change the t.test to wilcox.test in the below formula to compute
# Nonparametric statistics. In that case, log values would not differ.
# For publication remember to add the other possible alternative hypothesis.
p.vals.process <- gene.essential %>%
gather(., key = "Centrality", value = "cent_value",
pgr.ssc.vec,pgr.source.vec,pgr.sink.vec,pgr.und.vec,
degree.norm,
katz.ssc.vec,katz.source.norm,katz.sink.norm,
lap.ssc.vec,lap.sink.vec,lap.source.vec,lap.und.norm)%>%
group_by(pathway.name,Centrality) %>%
do(pval =tidy(wilcox.test( cent_value~ Description,
alternative = "greater",paired = F,exact=FALSE, data = .))) %>%
unnest()  %>%
group_by(Centrality) %>%
mutate(., fdr = p.adjust(p.value)) #%>%
ggplot(p.vals.process, aes(x= p.value)) +
geom_density(adjust = 1/4) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
# You can change the t.test to wilcox.test in the below formula to compute
# Nonparametric statistics. In that case, log values would not differ.
# For publication remember to add the other possible alternative hypothesis.
p.vals.process <- gene.essential %>%
gather(., key = "Centrality", value = "cent_value",
pgr.ssc.vec,pgr.source.vec,pgr.sink.vec,pgr.und.vec,
degree.norm,
katz.ssc.vec,katz.source.norm,katz.sink.norm,
lap.ssc.vec,lap.sink.vec,lap.source.vec,lap.und.norm)%>%
group_by(pathway.name,Centrality) %>%
do(pval =tidy(wilcox.test( cent_value~ Description,
alternative = "less",paired = F,exact=FALSE, data = .))) %>%
unnest()  %>%
group_by(Centrality) %>%
mutate(., fdr = p.adjust(p.value)) #%>%
ggplot(p.vals.process, aes(x= p.value)) +
geom_density(adjust = 1/4) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
### Plotting correlations and distributions
rm(list = ls())
require(dplyr)
require(ggplot2)
gene.essential <- readRDS("gene_essentials.rds")
norm.names <-  names(gene.essential)[grep("norm",names(gene.essential))]
norm.names
i <- norm.names[1]
i
i <- norm.names[12]
i
this.plot <- ggplot(gene.essential,aes_string(c(i),   colour = "pathway.name")) +
stat_density( kernel = "g")+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
legend.position="none",
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
this.plot <- ggplot(gene.essential,aes_string(c(i),   colour = "Description")) +
stat_density( kernel = "g")+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
legend.position="none",
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot <- ggplot(gene.essential,aes_string(c(i),   colour = "Description")) +
stat_density( kernel = "g")+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
legend.position="none",
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot <- ggplot(gene.essential,aes_string(c(i))) +
facet_wrap(~Description ,ncol = 2)+
stat_density( kernel = "g")+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
legend.position="none",
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot <- ggplot(gene.essential,aes_string(c(i))) +
facet_wrap(~Description ,ncol = 2)+
stat_density( kernel = "g")+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
legend.position="none",
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
norm.names
i <- norm.names[3]
this.plot <- ggplot(gene.essential,aes_string(c(i))) +
facet_wrap(~Description ,ncol = 2)+
stat_density( kernel = "g")+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
legend.position="none",
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
i <- norm.names[16]
this.plot <- ggplot(gene.essential,aes_string(c(i))) +
facet_wrap(~Description ,ncol = 2)+
stat_density( kernel = "g")+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
legend.position="none",
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
this.plot <- ggplot(gene.essential,aes_string(c(i),color = "Description")) +
stat_density( kernel = "g")+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
legend.position="none",
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
norm.names
i <- norm.names[3]
this.plot <- ggplot(gene.essential,aes_string(c(i),color = "Description")) +
stat_density( kernel = "g")+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
legend.position="none",
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
this.plot <- ggplot(gene.essential,aes_string(c(i),color = "Description")) +
stat_density( kernel = "g")+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
this.plot <- ggplot(gene.essential,aes_string(c(i),color = "Description")) +
stat_density()+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
this.plot <- ggplot(gene.essential,aes_string(c(i),color = "Description")) +
stat_density(adjust = 1/4)+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
this.plot <- ggplot(gene.essential,aes_string(c(i),color = "Description")) +
stat_density(adjust = 1/20)+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
this.plot <- ggplot(gene.essential,aes_string(c(i),color = "Description")) +
stat_density(adjust = 1/200)+
theme_bw() +
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 25),
axis.text.y=element_text(size = 20),
axis.text.x=element_text(size = 20),
axis.ticks.y=element_blank())
this.plot
# You can change the t.test to wilcox.test in the below formula to compute
# Nonparametric statistics. In that case, log values would not differ.
# For publication remember to add the other possible alternative hypothesis.
p.vals.process <- gene.essential %>%
gather(., key = "Centrality", value = "cent_value",
pgr.ssc.vec,pgr.source.vec,pgr.sink.vec,pgr.und.vec,
degree.norm,
katz.ssc.vec,katz.source.norm,katz.sink.norm,
lap.ssc.vec,lap.sink.vec,lap.source.vec,lap.und.norm)%>%
group_by(pathway.name,Centrality) %>%
do(pval =tidy(wilcox.test( cent_value~ Description,
alternative = "less",paired = F,exact=FALSE, data = .))) %>%
unnest()  %>%
group_by(Centrality) %>%
mutate(., fdr = p.adjust(p.value)) %>%
filter(., fdr < 0.05)
ggplot(p.vals.process, aes(x= p.value)) +
geom_density(adjust = 1/4) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
# You can change the t.test to wilcox.test in the below formula to compute
# Nonparametric statistics. In that case, log values would not differ.
# For publication remember to add the other possible alternative hypothesis.
p.vals.process <- gene.essential %>%
gather(., key = "Centrality", value = "cent_value",
pgr.ssc.vec,pgr.source.vec,pgr.sink.vec,pgr.und.vec,
degree.norm,
katz.ssc.vec,katz.source.norm,katz.sink.norm,
lap.ssc.vec,lap.sink.vec,lap.source.vec,lap.und.norm)%>%
group_by(pathway.name,Centrality) %>%
do(pval =tidy(wilcox.test( cent_value~ Description,
alternative = "less",paired = F,exact=FALSE, data = .))) %>%
unnest()  %>%
group_by(Centrality) %>%
mutate(., fdr = p.adjust(p.value)) %>%
filter(., fdr < 0.25)
ggplot(p.vals.process, aes(x= p.value)) +
geom_density(adjust = 1/4) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
# You can change the t.test to wilcox.test in the below formula to compute
# Nonparametric statistics. In that case, log values would not differ.
# For publication remember to add the other possible alternative hypothesis.
p.vals.process <- gene.essential %>%
gather(., key = "Centrality", value = "cent_value",
pgr.ssc.vec,pgr.source.vec,pgr.sink.vec,pgr.und.vec,
degree.norm,
katz.ssc.vec,katz.source.norm,katz.sink.norm,
lap.ssc.vec,lap.sink.vec,lap.source.vec,lap.und.norm)%>%
group_by(pathway.name,Centrality) %>%
do(pval =tidy(t.test( cent_value~ Description,
alternative = "less",paired = F,exact=FALSE, data = .))) %>%
unnest()  %>%
group_by(Centrality) %>%
mutate(., fdr = p.adjust(p.value)) %>%
filter(., fdr < 0.25)
ggplot(p.vals.process, aes(x= p.value)) +
geom_density(adjust = 1/4) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
# You can change the t.test to wilcox.test in the below formula to compute
# Nonparametric statistics. In that case, log values would not differ.
# For publication remember to add the other possible alternative hypothesis.
p.vals.process <- gene.essential %>%
gather(., key = "Centrality", value = "cent_value",
pgr.ssc.vec,pgr.source.vec,pgr.sink.vec,pgr.und.vec,
degree.norm,
katz.ssc.vec,katz.source.norm,katz.sink.norm,
lap.ssc.vec,lap.sink.vec,lap.source.vec,lap.und.norm)%>%
group_by(pathway.name,Centrality) %>%
do(pval =tidy(t.test( cent_value~ Description,
alternative = "greater",paired = F,exact=FALSE, data = .))) %>%
unnest()  %>%
group_by(Centrality) %>%
mutate(., fdr = p.adjust(p.value)) %>%
filter(., fdr < 0.25)
ggplot(p.vals.process, aes(x= p.value)) +
geom_density(adjust = 1/4) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
# You can change the t.test to wilcox.test in the below formula to compute
# Nonparametric statistics. In that case, log values would not differ.
# For publication remember to add the other possible alternative hypothesis.
p.vals.process <- gene.essential %>%
gather(., key = "Centrality", value = "cent_value",
pgr.ssc.vec,pgr.source.vec,pgr.sink.vec,pgr.und.vec,
degree.norm,
katz.ssc.vec,katz.source.norm,katz.sink.norm,
lap.ssc.vec,lap.sink.vec,lap.source.vec,lap.und.norm)%>%
group_by(pathway.name,Centrality) %>%
do(pval =tidy(t.test( cent_value~ Description,
alternative = "greater",paired = F,exact=FALSE, data = .))) %>%
unnest()  %>%
group_by(Centrality) %>%
mutate(., fdr = p.adjust(p.value)) %>%
filter(., fdr < 0.05)
# You can change the t.test to wilcox.test in the below formula to compute
# Nonparametric statistics. In that case, log values would not differ.
# For publication remember to add the other possible alternative hypothesis.
p.vals.process <- gene.essential %>%
gather(., key = "Centrality", value = "cent_value",
pgr.ssc.vec,pgr.source.vec,pgr.sink.vec,pgr.und.vec,
degree.norm,
katz.ssc.vec,katz.source.norm,katz.sink.norm,
lap.ssc.vec,lap.sink.vec,lap.source.vec,lap.und.norm)%>%
group_by(pathway.name,Centrality) %>%
do(pval =tidy(t.test( cent_value~ Description,
alternative = "less",paired = F,exact=FALSE, data = .))) %>%
unnest()  %>%
group_by(Centrality) %>%
mutate(., fdr = p.adjust(p.value)) #%>%
ggplot(p.vals.process, aes(x= p.value)) +
geom_density(adjust = 1/4) + #geom_smooth(method= "loess", color="green" , fill = "red") +
facet_wrap(~Centrality ,ncol = 4) +theme_bw()+
theme(strip.text = element_text(face="bold", size=20),
plot.title = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9),
axis.text.y=element_text(size = 12),
axis.text.x=element_text(size = 12),
axis.ticks.y=element_blank())
rm(list=ls())
n <- 100000
data <- as.data.frame(matrix(0,n,4))
names(data) <- c('u1' ,'u2' ,'N1', 'N2')
data$u1 <- runif(n, 0, 1)
data$u2 <- runif(n, 0, 1)
data$N1 <- sqrt(-2*log(data$u1)) * cos(2 *pi * data$u2)
data$N2 <- sqrt(-2*log(data$u1)) * sin(2 *pi * data$u2)
data$normal <- rnorm(n)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
hist(data$normal, breaks=100, col = alpha('yellow', 0.6), add=TRUE)
data$u1 <- runif(n, 0, 1)
data$u1
data$u2 <- runif(n, 0, 1)
data$u2
data$N1 <- sqrt(-2*log(data$u1)) * cos(2 *pi * data$u2)
data$N2 <- sqrt(-2*log(data$u1)) * sin(2 *pi * data$u2)
data$normal <- rnorm(n)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
hist(data$normal, breaks=100, col = alpha('yellow', 0.6), add=TRUE)
pi
data$N1 <- sqrt(-2*log(data$u1)) * cos(2 *3.14 * data$u2)
data$N2 <- sqrt(-2*log(data$u1)) * sin(2 *3.14 * data$u2)
data$normal <- rnorm(n)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
hist(data$normal, breaks=100, col = alpha('yellow', 0.6), add=TRUE)
data$N1 <- sqrt(-2*log(data$u1)) * cos(2 *pi * data$u2)
data$N2 <- sqrt(-2*log(data$u1)) * sin(2 *pi * data$u2)
data$normal <- rnorm(n)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
data$N1 <- sqrt(-2*log(data$u1)) * cos(2 *20 * data$u2)
data$N2 <- sqrt(-2*log(data$u1)) * sin(2 *20 * data$u2)
data$normal <- rnorm(n)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
hist(data$normal, breaks=100, col = alpha('yellow', 0.6), add=TRUE)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
data$N1 <- sqrt(-2*log(data$u1)) * cos(2 *200 * data$u2)
data$N2 <- sqrt(-2*log(data$u1)) * sin(2 *200 * data$u2)
data$normal <- rnorm(n)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
hist(data$normal, breaks=100, col = alpha('yellow', 0.6), add=TRUE)
data$N2 <- sqrt(-2*log(data$u1)) * sin(2 *pi * data$u2)
data$normal <- rnorm(n)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
hist(data$normal, breaks=100, col = alpha('yellow', 0.6), add=TRUE)
n <- 10000
data <- as.data.frame(matrix(0,n,4))
rm(list=ls())
n <- 10000
data <- as.data.frame(matrix(0,n,4))
names(data) <- c('u1' ,'u2' ,'N1', 'N2')
data$u1 <- runif(n, 0, 1)
data$u2 <- runif(n, 0, 1)
data$N1 <- sqrt(-2*log(data$u1)) * cos(2 *pi * data$u2)
data$N2 <- sqrt(-2*log(data$u1)) * sin(2 *pi * data$u2)
data$normal <- rnorm(n)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
hist(data$normal, breaks=100, col = alpha('yellow', 0.6), add=TRUE)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
hist(data$normal, breaks=100, col = alpha('yellow', 0.6), add=TRUE)
rm(list=ls())
n <- 10000
data <- as.data.frame(matrix(0,n,4))
names(data) <- c('u1' ,'u2' ,'N1', 'N2')
data$u1 <- runif(n, 0, 1)
data$u2 <- runif(n, 0, 1)
data$N1 <- sqrt(-2*log(data$u1)) * cos(2 *pi * data$u2)
data$N2 <- sqrt(-2*log(data$u1)) * sin(2 *pi * data$u2)
data$normal <- rnorm(n)
hist(data$N1, breaks=100, col = alpha('red', 1))
hist(data$N2, breaks=100, col = alpha('blue', 0.6), add=TRUE)
hist(data$normal, breaks=100, col = alpha('yellow', 0.6), add=TRUE)
hist(data$N1, breaks=50, col = alpha('red', 1))
hist(data$N2, breaks=50, col = alpha('blue', 0.6), add=TRUE)
hist(data$normal, breaks=50, col = alpha('yellow', 0.6), add=TRUE)
